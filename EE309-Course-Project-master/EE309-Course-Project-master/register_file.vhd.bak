library ieee;
use ieee.std_logic_1164.all;

component register_file is
--generic();
port(
D3: in std_logic_vector(15 downto 0);
D1,D2: out std_logic_vector(15 downto 0);
A1,A2,A3: in std_logic_vector(2 downto 0);
clk,write_signal: in std_logic;
); --write_signal is one if we are writing to RF
end component register_file;

architecture beh of register_file is
  type r is array(0 to 7) of std_logic_vector(15 downto 0);
  signal registers : r;
begin
  proc : process (clk) is
  begin
  D1 <= registers(to_integer(unsigned(A1)));
  D2 <= registers(to_integer(unsigned(A2)));
    if falling_edge(clk) then
      -- Read A and B before bypass
      
      -- Write and bypass
      if write_signal = '1' then
        registers(to_integer(unsigned(A3))) <= D3;  -- Write
--        if A1 = A3 then  -- Bypass for read A
 --         D1 <= D3;
--        end if;
--        if A2 = A3 then  -- Bypass for read B
--          D1 <= D3;
--        end if;
      end if;
    end if;
  end process proc;
end architecture beh;

component reg is
port(
Din: in std_logic_vector(15 downto 0);
Dout: out std_logic_vector(15 downto 0);
clk: in std_logic;
);
end component reg:

component sign_extend is
generic(input_len := 6;);
port(
Din: in std_logic_vector(input_len-1 downto 0);
Dout: in std_logic_vector(15 downto 0);
);
end component sign_extend;







